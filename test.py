import logging
import aiohttp
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import json

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TELEGRAM_TOKEN = '6794667704:AAF0KLoAnBuYgTu_5cPrI10A-K_ET1orT3Q'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Shikimori API
async def search_anime(query):
    headers = {
        'User-Agent': 'AnimeSearchBot/1.0',
        'Accept': 'application/json'
    }
    
    async with aiohttp.ClientSession() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            url = 'https://shikimori.one/api/animes'
            params = {
                'search': query,
                'limit': 1,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–∏–º –∞–Ω–∏–º–µ
                'order': 'popularity'  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            }
            
            async with session.get(url, params=params, headers=headers) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"API error: {response.status}")
                    return None
        except Exception as e:
            logger.error(f"Error during API request: {e}")
            return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∏–º–µ –≤ –±–∞–∑–µ Shikimori.\n'
        '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> None:
    query = update.message.text
    await update.message.reply_text(f'üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ "{query}"...')
    
    results = await search_anime(query)
    if results and len(results) > 0:
        try:
            anime = results[0]
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ
            title_russian = anime.get('russian', '–ù–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è')
            title_japanese = anime.get('name', '–ù–µ—Ç —è–ø–æ–Ω—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è')
            score = anime.get('score', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
            status = anime.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            episodes = anime.get('episodes', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            url = f"https://shikimori.one/animes/{anime['id']}"
            
            # –°—Ç–∞—Ç—É—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            status_map = {
                'released': '–í—ã—à–ª–æ',
                'ongoing': '–û–Ω–≥–æ–∏–Ω–≥',
                'anons': '–ê–Ω–æ–Ω—Å'
            }
            
            message = (
                f"üé¨ *{title_russian}*\n"
                f"üà≤ {title_japanese}\n"
                f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: {score}\n"
                f"üì∫ –≠–ø–∏–∑–æ–¥—ã: {episodes}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status_map.get(status, status)}\n"
                f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ Shikimori]({url})"
            )
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                disable_web_page_preview=False
            )
        except Exception as e:
            logger.error(f"Error processing anime data: {e}")
            await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∏–º–µ.')
    else:
        await update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.')

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()