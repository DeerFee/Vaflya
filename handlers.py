import random
import os
import requests
from telebot import types
import wikipediaapi
import config
from utils import upload_image_to_imagebb, get_neko_image, get_waifu_image, get_nsfw_waifu_image

anonymous_messages = {}

user_agent = "Vaflya/1.0 (https://t.me/VaflyaT_bot)"
wiki_wiki = wikipediaapi.Wikipedia(
    language='ru',
    extract_format=wikipediaapi.ExtractFormat.WIKI,
    user_agent=user_agent
)

def search_anime(query):
    headers = {
        'User-Agent': 'AnimeSearchBot/1.0',
        'Accept': 'application/json'
    }
    
    try:
        url = 'https://shikimori.one/api/animes'
        params = {
            'search': query,
            'limit': 1,
            'order': 'popularity'
        }
        
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"API error: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"Error during API request: {e}")
        return None

def setup_handlers(bot, db):
    @bot.message_handler(commands=['start'])
    def start(message):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        sti = open('static/pepeez.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
        item2 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
        item3 = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        item4 = types.KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        markup.add(item1, item2, item3, item4)

        bot.send_message(message.chat.id, 
                        f"–ó–¥–∞—Ä–æ–≤–∞ –ø–æ–ø—É—â–µ–Ω–µ—Ü!\n–Ø - <b>{bot.get_me().first_name}</b>.\n–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ", 
                        parse_mode="html", 
                        reply_markup=markup)

    @bot.message_handler(commands=['profile'])
    def profile(message):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_info = db.get_user(message.from_user.id)
        if user_info:
            profile_text = (
                f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
                f"üÜî ID: `{user_info['user_id']}`\n"
                f"üë§ –ò–º—è: {user_info['first_name']}\n"
                f"üìù Username: @{user_info['username']}\n"
                f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {user_info['rating']}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info['registration_date']}\n"
                f"üåç –Ø–∑—ã–∫: {user_info['language']}\n"
                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user_info['notifications_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}"
            )
            bot.send_message(message.chat.id, profile_text, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    @bot.message_handler(commands=['settings'])
    def settings(message):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications"))
        markup.add(types.InlineKeyboardButton("üåç –Ø–∑—ã–∫", callback_data="change_language"))
        
        bot.send_message(message.chat.id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: True)
    def callback_handler(call):
        if call.data == "toggle_notifications":
            user_info = db.get_user(call.from_user.id)
            new_status = not user_info['notifications_enabled']
            db.update_user_settings(call.from_user.id, notifications_enabled=new_status)
            status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")
            bot.edit_message_text(
                f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}",
                call.message.chat.id,
                call.message.message_id
            )

    @bot.message_handler(commands=['start'])
    def start(message):
        sti = open('static/pepeez.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
        item2 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
        item3 = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        markup.add(item1, item2, item3)

        bot.send_message(message.chat.id, f"–ó–¥–∞—Ä–æ–≤–∞ –ø–æ–ø—É—â–µ–Ω–µ—Ü!\n–Ø - <b>{message.from_user.first_name}</b>.\n–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ", parse_mode="html", reply_markup=markup)

    @bot.message_handler(commands=['vova'])
    def aboba(message):
        sti = open('static/vova.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        bot.send_message(message.chat.id, "–Ø –∫–∞–∫ –ª–æ—Ö, –º–Ω–µ –Ω—É–∂–µ–Ω –í–û–í–ê –Ω–æ –æ–Ω —Å—É–∫–∞ –±–ª—è—Ç—å —Å—Ç–∞–ª –µ–±–∞–Ω—ã–º –∞–±–æ–±–æ–π.\n–†–∞–∑–±–∏–ª –º–Ω–µ —Å–µ—Ä–¥—Ü–µ, –∏ —è –Ω–µ –º–æ–≥—É —ç—Ç–æ –ø—Ä–æ—Å—Ç–∏—Ç—å.")

    @bot.message_handler(commands=['send'])
    def send_message(message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, process_message)

    def process_message(message):
        chat_id = message.chat.id
        key = str(random.randint(1000, 9999))
        anonymous_messages[key] = message.text
        bot.send_message(chat_id, f"–í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á: {key}")

    @bot.message_handler(commands=['get'])
    def get_message(message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, retrieve_message)

    def retrieve_message(message):
        chat_id = message.chat.id
        key = message.text
        if key in anonymous_messages:
            bot.send_message(chat_id, f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {anonymous_messages[key]}")
        else:
            bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @bot.message_handler(commands=['search'])
    def search(message):
        query = message.text.split(' ', 1)
        if len(query) < 2:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        query = query[1]
        page = wiki_wiki.page(query)

        if page.exists():
            summary = page.summary[:4000]
            article_url = f"https://ru.wikipedia.org/wiki/{query.replace(' ', '_')}"
            bot.send_message(message.chat.id, f"{summary}<a href='{article_url}'>\n–î–æ—á–∏—Ç–∞—Ç—å –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏</a>", parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @bot.message_handler(commands=['neko'])
    def send_neko(message):
        neko_image_url = get_neko_image()
        if neko_image_url:
            bot.send_photo(message.chat.id, neko_image_url)
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ-—Ç—è–Ω.")

    @bot.message_handler(commands=['waifu'])
    def send_waifu(message):
        waifu_image_url = get_waifu_image('waifu')
        if waifu_image_url:
            bot.send_photo(message.chat.id, waifu_image_url)
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ waifu.")

    @bot.message_handler(commands=['waifu_nsfw'])
    def send_nsfw_waifu(message):
        waifu_image_url = get_nsfw_waifu_image('waifu')
        if waifu_image_url:
            bot.send_photo(message.chat.id, waifu_image_url)
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ waifu.")

    @bot.message_handler(content_types=['photo'])
    def handle_photo(message):
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        image_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"
        image_response = requests.get(image_url)

        if image_response.status_code == 200:
            with open('temp_image.jpg', 'wb') as f:
                f.write(image_response.content)

            uploaded_url = upload_image_to_imagebb(config.IMAGE_BB_KEY, 'temp_image.jpg')

            if uploaded_url:
                bbcode = f"[img]{uploaded_url}[/img]"
                htmlcode = f'<img src="{uploaded_url}" alt="Image"/>'
                bot.reply_to(message, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n\nBBCode:\n```\n{bbcode}\n```\n\nHTML:\n```\n{htmlcode}\n```", parse_mode="Markdown")
            else:
                bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    @bot.message_handler(commands=['anime'])
    def handle_anime(message):
        query = message.text.split(' ', 1)
        if len(query) < 2:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ.")
            return
        
        query = query[1]
        bot.send_message(message.chat.id, f'üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ "{query}"...')
        
        results = search_anime(query)
        if results and len(results) > 0:
            try:
                anime = results[0]
                title_russian = anime.get('russian', '–ù–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è')
                title_japanese = anime.get('name', '–ù–µ—Ç —è–ø–æ–Ω—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è')
                score = anime.get('score', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
                status = anime.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                episodes = anime.get('episodes', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                url = f"https://shikimori.one/animes/{anime['id']}"
                
                status_map = {
                    'released': '–í—ã—à–ª–æ',
                    'ongoing': '–û–Ω–≥–æ–∏–Ω–≥',
                    'anons': '–ê–Ω–æ–Ω—Å'
                }
                
                message_text = (
                    f"üé¨ *{title_russian}*\n"
                    f"üà≤ {title_japanese}\n"
                    f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: {score}\n"
                    f"üì∫ –≠–ø–∏–∑–æ–¥—ã: {episodes}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status_map.get(status, status)}\n"
                    f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ Shikimori]({url})"
                )
                
                bot.send_message(
                    message.chat.id,
                    message_text,
                    parse_mode='Markdown',
                    disable_web_page_preview=False
                )
            except Exception as e:
                logger.error(f"Error processing anime data: {e}")
                bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∏–º–µ.')
        else:
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.')  

    @bot.message_handler(content_types=['text'])
    def lalala(message):
        if message.chat.type == 'private':
            if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
                bot.send_message(message.chat.id, str(random.randint(0, 100)))
            elif message.text == '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥':
                commands_text = (
                    '<b>–û—Å–Ω–æ–≤–Ω—ã–µ</b>:\n'
                    '/start - —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ –µ—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∏ –∫–Ω–æ–ø–∫–∏\n'
                    '/vova - –í–æ–≤–∞.\n'
                    '/search [–∑–∞–ø—Ä–æ—Å] - –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏\n\n'
                    '<b>–ê—Ä—Ç—ã</b>\n'
                    '/neko - –∞—Ä—Ç—ã —Å —Å–∞–π—Ç–∞ <a href="nekos.life">Nekos</a>\n'
                    '/waifu - –∞—Ä—Ç—ã —Å —Å–∞–π—Ç–∞ <a href="waifu.pics">Waifu</a>\n'
                    '/waifu_nsfw - –∞—Ä—Ç—ã —Å —Å–∞–π—Ç–∞ <a href="waifu.pics">Waifu</a> (–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>NSFW</b>)\n\n'
                    '<b>–ü–ª—é—à–∫–∏</b>\n'
                    '/anime [–ù–∞–≤–∑–∞–Ω–∏–µ –ê–Ω–∏–º–µ] - –ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –±–∞–∑–µ <a href="shikimori.one">–®–∏–∫–∏–º–æ—Ä–∏</a>\n'
                    '–¢–∞–∫ –∂–µ, –µ—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –±–æ—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–æ–º –∑–∞–ª—å–µ—Ç –µ—ë –Ω–∞ <a href="https://imgbb.com">ImgBB</a>\n\n'
                    '<b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n'
                    '/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n'
                    '/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞'

                )
                bot.send_message(
                    message.chat.id,
                    commands_text,
                    parse_mode="HTML"
                )
            elif message.text == '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
                bot.send_message(
                    message.chat.id,
                    '–ü–æ —ç—Ç–∏–º –∞–¥—Ä–µ—Å–∞–º, –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—Å—è —Å–æ –º–Ω–æ–π, –¥–ª—è —á–µ–≥–æ-–ª–∏–±–æ\n'
                    'TG - @tapo4eckk\n'
                    '–ü–æ—á—Ç–∞ - godstarkg@gmail.com'
                )
            else:
                bot.send_message(message.chat.id, '–ï—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∏ –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ–ø–∏—à–∏ /start –µ—â–µ —Ä–∞–∑.')


