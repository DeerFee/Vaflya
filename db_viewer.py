import sqlite3
from tabulate import tabulate  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü
from typing import List, Tuple

class DatabaseViewer:
    def __init__(self, db_file: str = 'bot_database.db'):
        self.db_file = db_file

    def get_tables(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        conn.close()
        return [table[0] for table in tables]

    def view_table(self, table_name: str) -> Tuple[List[str], List[Tuple]]:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = [column[1] for column in cursor.fetchall()]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute(f"SELECT * FROM {table_name}")
        rows = cursor.fetchall()
        
        conn.close()
        return columns, rows

    def print_table(self, table_name: str) -> None:
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã"""
        columns, rows = self.view_table(table_name)
        print(f"\n–¢–∞–±–ª–∏—Ü–∞: {table_name}")
        print(tabulate(rows, headers=columns, tablefmt='grid'))

    def get_table_stats(self, table_name: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–µ"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        
        conn.close()
        return {
            "table_name": table_name,
            "total_rows": count
        }

if __name__ == "__main__":
    viewer = DatabaseViewer()
    
    print("üóÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    tables = viewer.get_tables()
    for i, table in enumerate(tables, 1):
        stats = viewer.get_table_stats(table)
        print(f"{i}. {table} (–∑–∞–ø–∏—Å–µ–π: {stats['total_rows']})")
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("3. –í—ã–π—Ç–∏")
        
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")
        
        if choice == "1":
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            for i, table in enumerate(tables, 1):
                print(f"{i}. {table}")
            
            try:
                table_index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: ")) - 1
                if 0 <= table_index < len(tables):
                    viewer.print_table(tables[table_index])
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã")
            except ValueError:
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        
        elif choice == "2":
            print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:")
            for table in tables:
                stats = viewer.get_table_stats(table)
                print(f"üìä {stats['table_name']}: {stats['total_rows']} –∑–∞–ø–∏—Å–µ–π")
        
        elif choice == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")